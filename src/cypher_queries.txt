Query 1

MATCH ()-[r:CITED]->(p:Paper)-[:IN_COLLECTION]->(pro:Proceeding)
WITH pro, p, count(r) as cite_num
WITH pro, p, cite_num ORDER BY cite_num DESC
RETURN pro, collect(p)[0..3], collect( cite_num)[0..3]
---

Query 2

MATCH (a:Author)-[:CONTRIBUTED]->(p:Paper)-[in_col:IN_COLLECTION]->(pro:Proceeding),
              (p)-[pub_in:PUBLISHED_IN]->(y:Year)
WITH  a, pro, count(pub_in) as tot_pubs
WHERE tot_pubs > 3
RETURN  a, pro, tot_pubs
---

Query 3

MATCH ()-[c:CITED]->(p:Paper),
      (a:Author)-[:CONTRIBUTED]->(p)
WITH  a, p, count(c) AS total_cited
WITH  a, count(p) AS papers, collect(total_cited) AS list_cited
WITH  a, [x IN range(1,size(list_cited)) where x<=list_cited[x-1]| [list_cited[x-1],x] ] as h_index_list

WITH a, h_index_list[-1][1] as h_index
RETURN a, h_index ORDER BY h_index DESC

- Query 3-v2 Citations now sorted
MATCH ()-[c:CITED]->(p:Paper),
      (a:Author)-[:CONTRIBUTED]->(p)
WITH  a, p, count(c) AS total_cited
WITH  a, p, total_cited ORDER BY total_cited DESC
WITH  a, count(p) AS papers, collect(total_cited) AS list_cited
WITH  a,papers, list_cited, [x IN range(1,size(list_cited)) where x<=list_cited[x-1] | [list_cited[x-1],x] ] as h_index_list

RETURN a, papers, list_cited, h_index_list, h_index_list[-1][1] as h_index

--- Good Helper Queries

CALL db.schema.visualization
This query allows you to see schema of the graph.

Data for testing CASE
MERGE (a:Person {name: "Alice", age: 38, eyes: "brown"})
MERGE (b:Person {name: "bob", age: 25, eyes: "blue"})
MERGE (c:Person {name: "Charlie", age: 53, eyes: "Green"})
MERGE (d:Person {name: "Daniel", age: 20, eyes: "brown"})
MERGE (e:Person {name: "Eskil", age: 41, eyes: "blue", array: ['one', 'two', 'three'] })

MERGE (a)-[:Knows]->(b)
MERGE (a)-[:Knows]->(c)
MERGE (c)-[:Knows]->(d)
MERGE (b)-[:Knows]->(d)
MERGE (b)-[:Knows]->(e)
